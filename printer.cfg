
# RPi e aceler√¥metro
[mcu rpi]
serial: /tmp/klipper_host_mcu
[adxl345]
cs_pin: rpi:None

[resonance_tester]
accel_chip: adxl345
probe_points:
    110, 110, 20  # an example
    
[mcu]
serial: /dev/serial/by-id/usb-1a86_USB_Serial-if00-port0
restart_method = command

[printer]
kinematics: corexz
max_velocity: 300
max_accel: 2000
max_z_velocity: 20
max_z_accel: 100

[input_shaper]
shaper_freq_x: 76.4
shaper_type_x: 3hump_ei
#shaper_freq_y: 190

[neopixel my_neopixel]
pin:PA1
chain_count: 16
#color_order: GRB
#   Set the pixel order required by the LED hardware (using a string
#   containing the letters R, G, B, W with W optional). Alternatively,
#   this may be a comma separated list of pixel orders - one for each
#   LED in the chain. The default is GRB.
#[display]
#lcd_type: st7920
#cs_pin: PA3
#sclk_pin: PA1
#sid_pin: PC1
#encoder_pins: ^PD2, ^PD3
#click_pin: ^!PC0
#[display_status]

[delayed_gcode ready_0]
initial_duration: 0
gcode:
    SET_LED LED=my_neopixel RED=0 GREEN=0 BLUE=0 
    
[delayed_gcode ready_1]
initial_duration: 0.5
gcode:
    SET_LED LED=my_neopixel RED=0.4 GREEN=0.4 BLUE=0.2 INDEX=1 TRANSMIT=0
    SET_LED LED=my_neopixel RED=0.4 GREEN=0.4 BLUE=0.2 INDEX=14 TRANSMIT=1
[delayed_gcode ready_2]
initial_duration: 1
gcode:
    SET_LED LED=my_neopixel RED=0.4 GREEN=0.4 BLUE=0.2 INDEX=2 TRANSMIT=0
    SET_LED LED=my_neopixel RED=0.4 GREEN=0.4 BLUE=0.2 INDEX=3 TRANSMIT=0
    SET_LED LED=my_neopixel RED=0.4 GREEN=0.4 BLUE=0.2 INDEX=12 TRANSMIT=0
    SET_LED LED=my_neopixel RED=0.4 GREEN=0.4 BLUE=0.2 INDEX=13 TRANSMIT=1
    
[delayed_gcode ready_3]
initial_duration: 1.4
gcode:
    SET_LED LED=my_neopixel RED=0.4 GREEN=0.4 BLUE=0.2 INDEX=4 TRANSMIT=0
    SET_LED LED=my_neopixel RED=0.4 GREEN=0.4 BLUE=0.2 INDEX=5 TRANSMIT=0
    SET_LED LED=my_neopixel RED=0.4 GREEN=0.4 BLUE=0.2 INDEX=10 TRANSMIT=0
    SET_LED LED=my_neopixel RED=0.4 GREEN=0.4 BLUE=0.2 INDEX=11 TRANSMIT=1
[delayed_gcode ready_4]
initial_duration: 1.7
gcode:
    SET_LED LED=my_neopixel RED=0.4 GREEN=0.4 BLUE=0.2 INDEX=6 TRANSMIT=0
    SET_LED LED=my_neopixel RED=0.4 GREEN=0.4 BLUE=0.2 INDEX=7 TRANSMIT=0
    SET_LED LED=my_neopixel RED=0.4 GREEN=0.4 BLUE=0.2 INDEX=8 TRANSMIT=0
    SET_LED LED=my_neopixel RED=0.65 GREEN=0.6 BLUE=0.5 INDEX=15 TRANSMIT=0
    SET_LED LED=my_neopixel RED=0.65 GREEN=0.6 BLUE=0.5 INDEX=16 TRANSMIT=0
    SET_LED LED=my_neopixel RED=0.4 GREEN=0.4 BLUE=0.2 INDEX=9 TRANSMIT=1
    
[stepper_x]
step_pin: PD7
dir_pin: PC5
enable_pin: !PD6
microsteps: 16
rotation_distance: 40
endstop_pin: ^PC2
position_endstop: 216
position_min: 0
position_max: 216
homing_speed: 50
homing_positive_dir: true

[stepper_y]
step_pin: PC6
dir_pin: !PC7
enable_pin: !PD6
microsteps: 16
rotation_distance: 40
endstop_pin: ^PC3
position_endstop: -5
position_min: -7
position_max: 240
homing_speed: 50

[stepper_z]
step_pin: PB3
dir_pin: PB2
enable_pin: !PA5
microsteps: 16
rotation_distance: 40
endstop_pin:  probe:z_virtual_endstop
position_max: 250
position_min:-3
homing_speed: 10

[probe]
pin: ^PC4
x_offset: 0
y_offset: 19.75
#z_offset: 4.17
speed: 7
lift_speed: 7
samples: 2
samples_result: median
sample_retract_dist: 2
samples_tolerance: 0.02
samples_tolerance_retries: 10

[servo klicky_servo]
pin: PA4
maximum_servo_angle: 180
minimum_pulse_width: 0.00025
maximum_pulse_width: 0.0024

[include klicky/klicky-probe.cfg]

[screws_tilt_adjust]
screw1: 23,8
screw1_name: Front_left
screw2: 191,8
screw2_name: Front_right
screw3: 191,175
screw3_name: Back_right
screw4: 23,175
screw4_name: Back_left
horizontal_move_z: 10
speed: 280.
screw_thread: CCW-M3

[bed_mesh]
speed: 280
horizontal_move_z: 10
mesh_min: 5,23
mesh_max: 200,200
probe_count: 4,4
algorithm: bicubic
fade_start: 1
fade_end: 10
fade_target: 0

[heater_bed]
heater_pin: PD4
sensor_type: EPCOS 100K B57560G104F
sensor_pin: PA6
min_temp: 0
max_temp: 130

[extruder]
max_extrude_only_distance: 100.0
step_pin: PB1
dir_pin: !PB0
enable_pin: !PD6
microsteps: 16
full_steps_per_rotation: 200
gear_ratio: 50:17
rotation_distance: 23.3
nozzle_diameter: 0.400
filament_diameter: 1.750
heater_pin: PD5
sensor_type: ATC Semitec 104NT-4-R025H42G #EPCOS 100K B57560G104F
sensor_pin: PA7
max_extrude_cross_section: 50.0
pressure_advance: 0.035 
min_temp: 0
max_temp: 300

[fan]
pin: PB4

[firmware_retraction]
retract_length: 1
retract_speed: 35
unretract_extra_length: 0.05
unretract_speed: 20

[gcode_arcs]
resolution: 0.1


[skew_correction]
[pause_resume]
[exclude_object]

# Macros

######################################################################
# Start Print and End Print
######################################################################


[gcode_macro CG28]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28
    {% endif %}

[gcode_macro START_PRINT]
gcode:
    {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}
    # Start bed heating
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={BED_TEMP}
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET={EXTRUDER_TEMP}
    # Use absolute coordinates
    G90
    # Reset the G-Code Z offset (adjust Z offset if needed)
    # SET_GCODE_OFFSET Z=0.0
    # Home the printer
    CG28
    BED_MESH_CALIBRATE
    #BED_MESH_PROFILE LOAD=default
    
    # Move the nozzle near the bed
    G1 X0 Y0 Z20 F3000

    M104 {EXTRUDER_TEMP}
    M140 {BED_TEMP}

    G1 X0 Y0 Z0.2 F3000
    G92 E0
    M109 {EXTRUDER_TEMP}
    M190 {BED_TEMP}
    G1 Y140 E10 F1700 ; prime the nozzle
    G1 X2.3 F5000
    G92 E0
    G1 Y10 E10 F1500 ; prime the nozzle
    G92 E0
    SKEW_PROFILE LOAD=skew_profile

[gcode_macro END_PRINT]
gcode:
    SET_SKEW CLEAR=1
    # Turn off bed, extruder, and fan
    TURN_OFF_HEATERS
    M106 S0
    # Move nozzle away from print while retracting
    G91
    G1 X-2 Y-2 E-10 F300
    # Raise nozzle by 5mm
    G1 Z+5 F3000
    G90
    G1 X5 Y200
    
    # Disable steppers
    M84
    

######################################################################
# Beeper
######################################################################

# M300 : Play tone. Beeper support, as commonly found on usual LCD
# displays (i.e. RepRapDiscount 2004 Smart Controller, RepRapDiscount
# 12864 Full Graphic). This defines a custom I/O pin and a custom
# GCODE macro.  Usage:
#   M300 [P<ms>] [S<Hz>]
#   P is the tone duration, S the tone frequency.
# The frequency won't be pitch perfect.



# [gcode_macro M300]
# gcode:
#     # Use a default 1kHz tone if S is omitted.
#     {% set S = params.S|default(1000)|int %}
#     # Use a 10ms duration is P is omitted.
#     {% set P = params.P|default(100)|int %}
#     SET_PIN PIN=BEEPER_pin VALUE=0.5 CYCLE_TIME={ 1.0/S if S > 0 else 1 }
#     G4 P{P}
#     SET_PIN PIN=BEEPER_pin VALUE=0


######################################################################
# Filament Change
######################################################################

# M600: Filament Change. This macro will pause the printer, move the
# tool to the change position, and retract the filament 50mm. Adjust
# the retraction settings for your own extruder. After filament has
# been changed, the print can be resumed from its previous position
# with the "RESUME" gcode.

[gcode_macro M600]
gcode:
    {% set X = params.X|default(180)|float %}
    {% set Y = params.Y|default(100)|float %}
    {% set Z = params.Z|default(10)|float %}
    SAVE_GCODE_STATE NAME=M600_state
    PAUSE
    G91
    G1 E-8 F2700
    G1 Z{Z}
    G90
    G1 X{X} Y{Y} F3000
    G91
    G1 E-500 F1000
    RESTORE_GCODE_STATE NAME=M600_state



[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    SET_SKEW CLEAR=1
    TURN_OFF_HEATERS
    SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout} ; set timeout back to configured value
    CLEAR_PAUSE
    END_PRINT
    BASE_CANCEL_PRINT
    

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    # Parameters
    {% set z = params.Z|default(10)|int %}                                                   ; z hop amount
    
    {% if printer['pause_resume'].is_paused|int == 0 %}     
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                              ; set z hop variable for reference in resume macro
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}    ; set hotend temp variable for reference in resume macro
                                
        SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0                                  ; disable filament sensor       
        SAVE_GCODE_STATE NAME=PAUSE                                                          ; save current print position for resume                
        BASE_PAUSE                                                                           ; pause print
        {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}       ; check that zhop doesn't exceed z max
            G91                                                                              ; relative positioning
            G1 Z{z} F900                                                                     ; raise Z up by z hop amount
        {% else %}
            { action_respond_info("Pause zhop exceeds maximum Z height.") }                  ; if z max is exceeded, show message and set zhop value for resume to 0
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
        {% endif %}
        G90                                                                                  ; absolute positioning
        G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000   ; park toolhead at front center
        SAVE_GCODE_STATE NAME=PAUSEPARK                                                      ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error) 
        M104 S0                                                                              ; turn off hotend
        SET_IDLE_TIMEOUT TIMEOUT=43200                                                       ; set timeout to 12 hours
    {% endif %}
    
[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
    # Parameters
    {% set e = params.E|default(2.5)|int %}                                          ; hotend prime amount (in mm)
    
    {% if printer['pause_resume'].is_paused|int == 1 %}
        SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1                          ; enable filament sensor
        #RESETRGB                                                                    ; reset LCD color
        SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}  ; set timeout back to configured value
        {% if etemp > 0 %}
            M109 S{etemp|int}                                                        ; wait for hotend to heat back up
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100                     ; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)  
        G91                                                                          ; relative positioning
        M83                                                                          ; relative extruder positioning
        {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}                                                
            G1 Z{zhop * -1} E{e} F900                                                ; prime nozzle by E, lower Z back down
        {% else %}                      
            G1 Z{zhop * -1} F900                                                     ; lower Z back down without priming (just in case we are testing the macro with cold hotend)
        {% endif %}                             
        RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60                          ; restore position
        BASE_RESUME                                                                  ; resume print
    {% endif %}"
    
#[gcode_macro M109]
#rename_existing: M99109
#gcode:
#    #Parameters
#    {% set s = params.S|float %}
#    
#    M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}  ; Set hotend temp
#    {% if s != 0 %}
#        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s} MAXIMUM={s+1}   ; Wait for hotend temp (within 1 degree)
#    {% endif %}
    
#[gcode_macro M190]
#rename_existing: M99190
#gcode:
#    #Parameters
#    {% set s = params.S|float %}#

#    M140 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}   ; Set bed temp
#    {% if s != 0 %}
#        TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={s} MAXIMUM={s+1}  ; Wait for bed temp (within 1 degree)
#    {% endif %}

#*# <---------------------- SAVE_CONFIG ---------------------->
#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.
#*#
#*# [extruder]
#*# control = pid
#*# pid_kp = 34.795
#*# pid_ki = 3.866
#*# pid_kd = 78.288
#*#
#*# [heater_bed]
#*# control = pid
#*# pid_kp = 69.510
#*# pid_ki = 1.810
#*# pid_kd = 667.300
#*#
#*# [skew_correction skew_profile]
#*# xy_skew = -0.00851080855087
#*# xz_skew = 0.0
#*# yz_skew = 0.0
#*#
#*# [bed_mesh default]
#*# version = 1
#*# points =
#*# 	-0.293750, -0.287500, -0.275000, -0.137500
#*# 	-0.000000, -0.075000, -0.075000, 0.137500
#*# 	0.187500, 0.125000, 0.112500, 0.175000
#*# 	0.350000, 0.218750, 0.150000, 0.200000
#*# tension = 0.2
#*# min_x = 5.0
#*# algo = bicubic
#*# y_count = 4
#*# mesh_y_pps = 2
#*# min_y = 23.0
#*# x_count = 4
#*# max_y = 200.0
#*# mesh_x_pps = 2
#*# max_x = 200.0
#*#
#*# [probe]
#*# z_offset = 8.494
#*#
#*# [input_shaper]
#*# shaper_type_y = 2hump_ei
#*# shaper_freq_y = 47.2
